<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AlexBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.alexlin.club/blog/"/>
  <updated>2018-12-27T11:35:52.141Z</updated>
  <id>www.alexlin.club/blog/</id>
  
  <author>
    <name>Alex Lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基础算法排序 - 插入排序</title>
    <link href="www.alexlin.club/blog/2018/12/07/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%8E%92%E5%BA%8F%20-%20%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>www.alexlin.club/blog/2018/12/07/基础算法排序 - 插入排序/</id>
    <published>2018-12-07T14:47:37.000Z</published>
    <updated>2018-12-27T11:35:52.141Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; title=&quot;插入排序&quot;&gt;&lt;/a&gt;插入排序&lt;/h1&gt;&lt;h2 id=&quot;一-概念&quot;&gt;&lt;a href=&quot;#一-概念&quot; class=&quot;headerlink&quot; title=&quot;一 概念&quot;&gt;&lt;/a&gt;一 概念&lt;/h2&gt;&lt;p&gt;​    有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插入后此数据序列仍然有序，这个时候就要用插入排序法。&lt;/p&gt;
&lt;p&gt;​    插入排序是最简单的排序算法之一，他的核心是将一个新数据插入到已经排好序的有序数据中，从而得到一个新的、个数+1的有序数据。&lt;/p&gt;
&lt;p&gt;​    插入排序算法适用于少量数据的排序，时间复杂度为&lt;span&gt;$O(n^2)$&lt;/span&gt;&lt;!-- Has MathJax --&gt;。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="算法" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="算法" scheme="www.alexlin.club/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="www.alexlin.club/blog/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="插入排序" scheme="www.alexlin.club/blog/tags/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>【干了这杯源码】集合框架 Queue之PriorityQueue（七）</title>
    <link href="www.alexlin.club/blog/2018/12/04/%E3%80%90%E5%B9%B2%E4%BA%86%E8%BF%99%E6%9D%AF%E6%BA%90%E7%A0%81%E3%80%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-Queue%E4%B9%8BPriorityQueue%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <id>www.alexlin.club/blog/2018/12/04/【干了这杯源码】集合框架-Queue之PriorityQueue（六）/</id>
    <published>2018-12-04T15:20:37.000Z</published>
    <updated>2019-01-28T02:21:10.816Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PriorityQueue&quot;&gt;&lt;a href=&quot;#PriorityQueue&quot; class=&quot;headerlink&quot; title=&quot;PriorityQueue&quot;&gt;&lt;/a&gt;PriorityQueue&lt;/h1&gt;&lt;h2 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一 概述&quot;&gt;&lt;/a&gt;一 概述&lt;/h2&gt;&lt;p&gt;​    PriorityQueue(优先队列)，实现了小顶堆（大顶堆），它的逻辑结构是一棵完全二叉树，存储结构其实是一个数组。逻辑结构层次遍历的结果刚好是一个数组。&lt;br&gt;​    PriorityQueue的元素根据自然顺序排序，如果重写了Comparator接口方法，则按照重写的新规则排序，不允许存入null元素。&lt;br&gt;​&lt;/p&gt;
    
    </summary>
    
      <category term="计算机" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="Java" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/Java/"/>
    
      <category term="干了这杯源码" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/Java/%E5%B9%B2%E4%BA%86%E8%BF%99%E6%9D%AF%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="java" scheme="www.alexlin.club/blog/tags/java/"/>
    
      <category term="集合框架" scheme="www.alexlin.club/blog/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
      <category term="源码" scheme="www.alexlin.club/blog/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="Queue" scheme="www.alexlin.club/blog/tags/Queue/"/>
    
      <category term="优先队列" scheme="www.alexlin.club/blog/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
      <category term="PriorityQueue" scheme="www.alexlin.club/blog/tags/PriorityQueue/"/>
    
  </entry>
  
  <entry>
    <title>探索中间件 - 消息队列之RabbitMQ</title>
    <link href="www.alexlin.club/blog/2018/12/02/%E6%8E%A2%E7%B4%A2%E4%B8%AD%E9%97%B4%E4%BB%B6%20-%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B9%8BRabbitMQ/"/>
    <id>www.alexlin.club/blog/2018/12/02/探索中间件 - 消息队列之RabbitMQ/</id>
    <published>2018-12-02T14:47:37.000Z</published>
    <updated>2018-12-02T05:01:34.671Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RabbitMQ&quot;&gt;&lt;a href=&quot;#RabbitMQ&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ&quot;&gt;&lt;/a&gt;RabbitMQ&lt;/h1&gt;&lt;h2 id=&quot;一-什么是消息队列&quot;&gt;&lt;a href=&quot;#一-什么是消息队列&quot; class=&quot;headerlink&quot; title=&quot;一 什么是消息队列&quot;&gt;&lt;/a&gt;一 什么是消息队列&lt;/h2&gt;&lt;h3 id=&quot;1-定义&quot;&gt;&lt;a href=&quot;#1-定义&quot; class=&quot;headerlink&quot; title=&quot;1 定义&quot;&gt;&lt;/a&gt;1 定义&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;​    消息队列（Message queue）是一种进程间通信或同一进程的不同线程间的通信方式，软件的贮列用来处理一系列的输入，通常是来自用户。消息队列提供了异步的通信协议，每一个贮列中的纪录包含详细说明的数据，包含发生的时间，输入设备的种类，以及特定的输入参数，也就是说：消息的发送者和接收者不需要同时与消息队列互交。消息会保存在队列中，直到接收者取回它。 ——维基百科&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;消息队列是消费-生产者模型的典型实现，如下图所示：&lt;/p&gt;
&lt;img src=&quot;/2018/12/02/探索中间件%20-%20消息队列之RabbitMQ/xxdl.png&quot;&gt;
    
    </summary>
    
      <category term="计算机" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="中间件" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="消息队列" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="RabbitMQ" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/"/>
    
    
      <category term="中间件" scheme="www.alexlin.club/blog/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="消息队列" scheme="www.alexlin.club/blog/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="Queue" scheme="www.alexlin.club/blog/tags/Queue/"/>
    
      <category term="生产-消费者模型" scheme="www.alexlin.club/blog/tags/%E7%94%9F%E4%BA%A7-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="RabbitMQ" scheme="www.alexlin.club/blog/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>干高等数学 - 映射与函数（第一章第一节）</title>
    <link href="www.alexlin.club/blog/2018/11/30/%E6%98%A0%E5%B0%84%E4%B8%8E%E5%87%BD%E6%95%B0%EF%BC%88%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%89/"/>
    <id>www.alexlin.club/blog/2018/11/30/映射与函数（第一章第一节）/</id>
    <published>2018-11-30T14:47:37.000Z</published>
    <updated>2018-12-27T11:35:35.327Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;映射与函数&quot;&gt;&lt;a href=&quot;#映射与函数&quot; class=&quot;headerlink&quot; title=&quot;映射与函数&quot;&gt;&lt;/a&gt;映射与函数&lt;/h1&gt;&lt;h2 id=&quot;一-映射&quot;&gt;&lt;a href=&quot;#一-映射&quot; class=&quot;headerlink&quot; title=&quot;一 映射&quot;&gt;&lt;/a&gt;一 映射&lt;/h2&gt;&lt;h3 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念&quot; class=&quot;headerlink&quot; title=&quot;1 概念&quot;&gt;&lt;/a&gt;1 概念&lt;/h3&gt;&lt;h4 id=&quot;1-1-映射&quot;&gt;&lt;a href=&quot;#1-1-映射&quot; class=&quot;headerlink&quot; title=&quot;1.1 映射&quot;&gt;&lt;/a&gt;1.1 映射&lt;/h4&gt;&lt;p&gt;​    设X、Y是两个非空集合，如果存在一个法则f，使得对X中每个元素x，按法则f，在Y中有唯一确定的元素y与之对应，那么称f为从X到Y的映射，记作：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
f:X→Y&lt;/script&gt;
    
    </summary>
    
      <category term="高等数学" scheme="www.alexlin.club/blog/categories/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
    
      <category term="第一章" scheme="www.alexlin.club/blog/categories/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    
      <category term="第一节" scheme="www.alexlin.club/blog/categories/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E7%AC%AC%E4%B8%80%E7%AB%A0/%E7%AC%AC%E4%B8%80%E8%8A%82/"/>
    
      <category term="映射与函数" scheme="www.alexlin.club/blog/categories/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E7%AC%AC%E4%B8%80%E7%AB%A0/%E7%AC%AC%E4%B8%80%E8%8A%82/%E6%98%A0%E5%B0%84%E4%B8%8E%E5%87%BD%E6%95%B0/"/>
    
    
      <category term="高等数学" scheme="www.alexlin.club/blog/tags/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
    
      <category term="映射" scheme="www.alexlin.club/blog/tags/%E6%98%A0%E5%B0%84/"/>
    
      <category term="函数" scheme="www.alexlin.club/blog/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>【干了这杯源码】集合框架 List之Stack（五）</title>
    <link href="www.alexlin.club/blog/2018/11/24/%E3%80%90%E5%B9%B2%E4%BA%86%E8%BF%99%E6%9D%AF%E6%BA%90%E7%A0%81%E3%80%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-List%E4%B9%8BStack%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>www.alexlin.club/blog/2018/11/24/【干了这杯源码】集合框架-List之Stack（五）/</id>
    <published>2018-11-24T15:20:37.000Z</published>
    <updated>2018-11-28T13:00:38.286Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Stack&quot;&gt;&lt;a href=&quot;#Stack&quot; class=&quot;headerlink&quot; title=&quot;Stack&quot;&gt;&lt;/a&gt;Stack&lt;/h1&gt;&lt;h2 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一 概述&quot;&gt;&lt;/a&gt;一 概述&lt;/h2&gt;&lt;p&gt;​    &lt;strong&gt;Stack&lt;/strong&gt;英文意思为一大堆，Java JDK中的&lt;strong&gt;Stack&lt;/strong&gt;类用于模拟数据结构中的栈。&lt;br&gt;​    什么是栈结构，用最简单的比喻，栈结构就如同桌子上整齐堆叠的一些书本，当你存放的时候，必须一本一本的往上放(入栈)，当你取书的时候必须从最上面一本一本的往下拿(出栈)。&lt;br&gt;​    所以，栈结构的特点是先进者后出，后进者先出，就是所谓的&lt;strong&gt;FILO&lt;/strong&gt;( First In Last Out)。&lt;br&gt;​    &lt;strong&gt;Stack&lt;/strong&gt; 继承于Vector类，所以&lt;strong&gt;Stack&lt;/strong&gt;是一个线程安全的基于数组实现的栈结构。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="Java" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/Java/"/>
    
      <category term="干了这杯源码" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/Java/%E5%B9%B2%E4%BA%86%E8%BF%99%E6%9D%AF%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="java" scheme="www.alexlin.club/blog/tags/java/"/>
    
      <category term="集合框架" scheme="www.alexlin.club/blog/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
      <category term="源码" scheme="www.alexlin.club/blog/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="List" scheme="www.alexlin.club/blog/tags/List/"/>
    
      <category term="Stack" scheme="www.alexlin.club/blog/tags/Stack/"/>
    
      <category term="栈" scheme="www.alexlin.club/blog/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>【干了这杯源码】集合框架 List之Vector（四）</title>
    <link href="www.alexlin.club/blog/2018/11/19/%E3%80%90%E5%B9%B2%E4%BA%86%E8%BF%99%E6%9D%AF%E6%BA%90%E7%A0%81%E3%80%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-List%E4%B9%8BVector%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>www.alexlin.club/blog/2018/11/19/【干了这杯源码】集合框架-List之Vector（四）/</id>
    <published>2018-11-19T10:47:37.000Z</published>
    <updated>2018-11-28T13:05:21.964Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Vector&quot;&gt;&lt;a href=&quot;#Vector&quot; class=&quot;headerlink&quot; title=&quot;Vector&quot;&gt;&lt;/a&gt;Vector&lt;/h1&gt;&lt;h2 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一 概述&quot;&gt;&lt;/a&gt;一 概述&lt;/h2&gt;&lt;img src=&quot;/2018/11/19/【干了这杯源码】集合框架-List之Vector（四）/Vector.png&quot;&gt;
&lt;p&gt;​    Vector来自于远古的JDK1.0，属于上古时期的类，因为其所有方法都上了同步锁，所以性能会比ArrayList低很多。&lt;br&gt;​    Vector和ArrayList一样实现了可自动扩充的数组，都可根据下标直接访问元素，另外Vector可以根据需求改变自动增长的策略，默认每次增为原来的一倍。&lt;br&gt;​    Vector是线程安全的，扫一眼源码你会发现，Vector很多方法都加了synchronized关键字，确保了线程的安全性。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="Java" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/Java/"/>
    
      <category term="干了这杯源码" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/Java/%E5%B9%B2%E4%BA%86%E8%BF%99%E6%9D%AF%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="java" scheme="www.alexlin.club/blog/tags/java/"/>
    
      <category term="集合框架" scheme="www.alexlin.club/blog/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
      <category term="源码" scheme="www.alexlin.club/blog/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="List" scheme="www.alexlin.club/blog/tags/List/"/>
    
      <category term="Vector" scheme="www.alexlin.club/blog/tags/Vector/"/>
    
      <category term="线程安全" scheme="www.alexlin.club/blog/tags/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>【干了这杯源码】集合框架 List之LinkedList（三）</title>
    <link href="www.alexlin.club/blog/2018/11/03/%E3%80%90%E5%B9%B2%E4%BA%86%E8%BF%99%E6%9D%AF%E6%BA%90%E7%A0%81%E3%80%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-List%E4%B9%8BLinkedLIst%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>www.alexlin.club/blog/2018/11/03/【干了这杯源码】集合框架-List之LinkedLIst（三）/</id>
    <published>2018-11-03T06:47:37.000Z</published>
    <updated>2018-11-28T12:25:04.646Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LinkedList&quot;&gt;&lt;a href=&quot;#LinkedList&quot; class=&quot;headerlink&quot; title=&quot;LinkedList&quot;&gt;&lt;/a&gt;LinkedList&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;img src=&quot;/2018/11/03/【干了这杯源码】集合框架-List之LinkedLIst（三）/LinkedList.png&quot;&gt;
&lt;p&gt;LinkedList 继承List接口，继承了List所有的方法。&lt;/p&gt;
&lt;p&gt;LinkedList 允许存入任意类型的元素（包括null）。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="Java" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/Java/"/>
    
      <category term="干了这杯源码" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/Java/%E5%B9%B2%E4%BA%86%E8%BF%99%E6%9D%AF%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="java" scheme="www.alexlin.club/blog/tags/java/"/>
    
      <category term="集合框架" scheme="www.alexlin.club/blog/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
      <category term="源码" scheme="www.alexlin.club/blog/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="List" scheme="www.alexlin.club/blog/tags/List/"/>
    
      <category term="LinkedList" scheme="www.alexlin.club/blog/tags/LinkedList/"/>
    
      <category term="链表" scheme="www.alexlin.club/blog/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>【干了这杯源码】集合框架 List之ArrayList（二）</title>
    <link href="www.alexlin.club/blog/2018/11/02/%E3%80%90%E5%B9%B2%E4%BA%86%E8%BF%99%E6%9D%AF%E6%BA%90%E7%A0%81%E3%80%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-List%E4%B9%8BArrayList%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>www.alexlin.club/blog/2018/11/02/【干了这杯源码】集合框架-List之ArrayList（二）/</id>
    <published>2018-11-02T14:47:37.000Z</published>
    <updated>2018-11-03T04:04:06.695Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ArrayList&quot;&gt;&lt;a href=&quot;#ArrayList&quot; class=&quot;headerlink&quot; title=&quot;ArrayList&quot;&gt;&lt;/a&gt;ArrayList&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;img src=&quot;/2018/11/02/【干了这杯源码】集合框架-List之ArrayList（二）/ArrayList.png&quot;&gt;
&lt;p&gt;​    ArrayList的底层数据结构为数组，实现了List接口，允许传入所有类型的元素(包括null)。&lt;br&gt;​    ArrayList内部提供了方法，对数组的大小进行自动扩充。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="Java" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/Java/"/>
    
      <category term="干了这杯源码" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/Java/%E5%B9%B2%E4%BA%86%E8%BF%99%E6%9D%AF%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="java" scheme="www.alexlin.club/blog/tags/java/"/>
    
      <category term="集合框架" scheme="www.alexlin.club/blog/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
      <category term="源码" scheme="www.alexlin.club/blog/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="List" scheme="www.alexlin.club/blog/tags/List/"/>
    
      <category term="ArrayList" scheme="www.alexlin.club/blog/tags/ArrayList/"/>
    
      <category term="数组" scheme="www.alexlin.club/blog/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>【干了这杯源码】集合框架 Collection接口介绍（一）</title>
    <link href="www.alexlin.club/blog/2018/10/08/%E3%80%90%E5%B9%B2%E4%BA%86%E8%BF%99%E6%9D%AF%E6%BA%90%E7%A0%81%E3%80%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-Collection%E6%8E%A5%E5%8F%A3%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>www.alexlin.club/blog/2018/10/08/【干了这杯源码】集合框架-Collection接口介绍（一）/</id>
    <published>2018-10-08T14:47:37.000Z</published>
    <updated>2018-11-03T05:13:39.642Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Collection接口&quot;&gt;&lt;a href=&quot;#Collection接口&quot; class=&quot;headerlink&quot; title=&quot;Collection接口&quot;&gt;&lt;/a&gt;Collection接口&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;​    Collection是集合框架的根接口(root interface)，一个Collection代表了一组元素的集合，一部分Collection允许元素重复、有序排列，一部分则相反，在JDK中没有提供任何直接实现Collection的实现类，但是提供了很多特异性的子接口，例如Set、List和Queue，这些子接口将会极大程度地覆盖日常开发使用的情景。&lt;/p&gt;
&lt;p&gt;所有实现Collection接口的实现类都包含了两个构造器:&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="Java" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/Java/"/>
    
      <category term="干了这杯源码" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/Java/%E5%B9%B2%E4%BA%86%E8%BF%99%E6%9D%AF%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="java" scheme="www.alexlin.club/blog/tags/java/"/>
    
      <category term="集合框架" scheme="www.alexlin.club/blog/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
      <category term="源码" scheme="www.alexlin.club/blog/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="数据结构" scheme="www.alexlin.club/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>【干了这杯源码】集合框架  数据结构（零）</title>
    <link href="www.alexlin.club/blog/2018/10/08/%E3%80%90%E5%B9%B2%E6%BA%90%E7%A0%81%E3%80%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%20%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E9%9B%B6%EF%BC%89/"/>
    <id>www.alexlin.club/blog/2018/10/08/【干源码】集合框架  数据结构（零）/</id>
    <published>2018-10-08T14:47:37.000Z</published>
    <updated>2018-10-23T14:44:45.857Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;​    本专题将会给大家来带Java最实用的东西—-集合框架，并将会直接从源码入手，直接干源码！由于集合框架的底层离不开数据结构，想搞清楚List、Set、Map等的底层实现，必须先从数据结构开始讲起。所以开山第一篇，将会给大家介绍计算机的数据结构。&lt;/p&gt;
&lt;p&gt;​    数据结构可以说是计算机入门必修课程，同时也是特别烧脑的纯理论知识。所以本篇将会尽量避开让人看不懂的奇奇怪怪的东西，以生动形象的图文并茂带你窥探神秘的数据结构。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="Java" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/Java/"/>
    
      <category term="干了这杯源码" scheme="www.alexlin.club/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/Java/%E5%B9%B2%E4%BA%86%E8%BF%99%E6%9D%AF%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="java" scheme="www.alexlin.club/blog/tags/java/"/>
    
      <category term="集合框架" scheme="www.alexlin.club/blog/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
      <category term="源码" scheme="www.alexlin.club/blog/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="数据结构" scheme="www.alexlin.club/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
